#!/usr/bin/python3

import sys
import os


class Param:

    def __init__(self, desktop_file_param, long_command_param, short_command_param):
        self.desktop_file_param = desktop_file_param
        self.long_command_param = long_command_param
        self.short_command_param = short_command_param

    def long_param(self):
        if self.long_command_param is not None:
            return "--" + self.long_command_param

        return None

    def short_param(self):
        if self.short_command_param is not None:
            return "-" + self.short_command_param

        return None


class Arg:

    def __init__(self, param, value=None):
        self.param = param
        self.value = value


class Params:
    Type = Param("Type", "type", "t")
    Name = Param("Name", "name", "n")
    Exec = Param("Exec", "exec", "e")
    Icon = Param("Icon", "icon", "i")
    Comment = Param("Comment", "comment", "c")
    Keywords = Param("Keywords", "keyword", "k")
    Categories = Param("Categories", "categories", None)
    Destination = Param(None, "destination", "d")
    Filename = Param(None, "filename", "f")


params = (
    Params.Type,
    Params.Name,
    Params.Exec,
    Params.Icon,
    Params.Comment,
    Params.Keywords,
    Params.Categories,
    Params.Destination,
    Params.Filename
)
default_destination = "/usr/share/applications/"

name = None
exec = None


def parse_args(strings):
    args = []

    last = None

    for s in strings:
        for p in params:
            if s == p.long_param() or s == p.short_param():
                last = Arg(p)
                break
            elif last is not None:
                last.value = s
                args.append(last)
                last = None
                break

    return args


def to_string(arg):
    if arg is not None:
        return arg.param.desktop_file_param + "=" + arg.value + "\n"

    return ""


def desktop_file_string(args):
    global name
    global exec

    string = "[Desktop Entry]\n"

    type = get_arg(args, Params.Type)
    if type is not None:
        string += to_string(type)
    else:
        string += to_string(Arg(Params.Type, value="Application"))

    name = get_arg(args, Params.Name)
    string += to_string(name)

    exec = get_path_arg(args, Params.Exec)
    string += to_string(exec)

    string += to_string(get_path_arg(args, Params.Icon))

    string += to_string(get_arg(args, Params.Comment))

    string += to_string(get_list_arg(args, Params.Keywords))

    string += to_string(get_list_arg(args, Params.Categories))

    return string


def get_destination(args):
    for a in args:
        if a.param == Params.Destination:
            return a.value

    return default_destination


def get_filename(args):
    for a in args:
        if a.param == Params.Filename:
            return a.value

    return os.path.basename(exec.value)


def get_arg(args, param):
    for a in args:
        if a.param == param:
            return a

    return None


def get_path_arg(args, param):
    a = get_arg(args, param)
    if a is not None:
        a.value = os.path.abspath(a.value)
        return a

    return None


def get_list_arg(args, param):
    values = []
    for a in args:
        if a.param == param:
            values.append(a.value)

    if len(values) > 0:
        value = ""
        for v in values:
            value += v + ";"

        return Arg(param, value=value)

    return None


if __name__ == "__main__":
    strings = sys.argv[1:]
    args = parse_args(strings)

    content = desktop_file_string(args)

    destination = get_destination(args)
    filename = get_filename(args) + ".desktop"
    file_path = os.path.join(destination, filename)

    if name is not None and exec is not None:
        with open(file_path, "w") as desktop_file:
            desktop_file.write(content)
