#!/usr/bin/python3

import sys
import os


class Param:

    def __init__(
            self,
            desktop_file_param,
            long_cmd_param,
            short_cmd_param,
            param_name,
            description):
        self.desktop_file_param = desktop_file_param
        self.long_cmd_param = long_cmd_param
        self.short_cmd_param = short_cmd_param
        self.param_name = param_name
        self.description = description

    def long_param(self):
        if self.long_cmd_param is not None:
            return "--" + self.long_cmd_param

        return None

    def short_param(self):
        if self.short_cmd_param is not None:
            return "-" + self.short_cmd_param

        return None


class Arg:

    def __init__(self, param, value=None):
        self.param = param
        self.value = value


class Params:
    Type = Param("Type", "type", "t", "<type>", "The type by default Application.")
    Name = Param("Name", "name", "n", "<name>", "The display name of the application.")
    Exec = Param("Exec", "exec", "e", "<file>", "The path to a file that will be executed.")
    Icon = Param("Icon", "icon", "i", "<icon file>", "A path to an icon.")
    GlobalIcon = Param("Icon", "global-icon", "g", "<icon name>", "A global icon which is included in the icon theme.")
    Comment = Param("Comment", "comment", "c", "<comment>", "A comment.")
    Keywords = Param("Keywords", "keyword", "k", "<keyword>", "A keyword (multiple values are supported).")
    Categories = Param("Categories", "category", None, "<category>", "A category (multiple values are supported).")
    Destination = Param(None, "destination", "d", "<dir>", "The destination directory of the .desktop file by default /usr/share/applications.")
    Filename = Param(None, "filename", "f", "<filename>", "The filename of the .desktop file without extensions.")


params = (
    Params.Type,
    Params.Name,
    Params.Exec,
    Params.Icon,
    Params.GlobalIcon,
    Params.Comment,
    Params.Keywords,
    Params.Categories,
    Params.Destination,
    Params.Filename
)
default_destination = "/usr/share/applications/"

name = None
exec = None
icon = None


def help_string():
    help_string = """create-desktop-file
A script to create .desktop files easily.

USAGE:
    create-desktop-file -e FILE -n NAME [OPTIONS]

OPTIONS:
"""

    longest_param_length = 0
    for p in params:
        long_param = p.long_param()
        if long_param is not None:
            length = len(long_param)

            if length > longest_param_length:
                longest_param_length = length
    
    longest_name_length = 0
    for p in params:
        param_name = p.param_name
        if param_name is not None:
            length = len(param_name)

            if length > longest_name_length:
                longest_name_length = length

    for p in params:
        short_param = p.short_param()
        if short_param is None:
            short_param = "  "
    
        long_param = p.long_param()
        if long_param is None:
            long_param = ""
        length_diff = longest_param_length - len(long_param)
        
        param_name = p.param_name
        if param_name is None:
            param_name = ""
        length_diff += longest_name_length - len(param_name)
        param_name += " " * length_diff

        help_string += "    " + short_param + " " + long_param + " " + param_name + "    " + p.description + "\n"

    return (help_string)


def parse_args(strings):
    args = []

    last = None

    for s in strings:
        for p in params:
            if s == "--help" or s == "-h":
                print(help_string())
                exit()
            elif s == p.long_param() or s == p.short_param():
                last = Arg(p)
                break
            elif last is not None:
                last.value = s
                args.append(last)
                last = None
                break

    return args


def to_string(arg):
    if arg is not None:
        return arg.param.desktop_file_param + "=" + arg.value + "\n"

    return ""


def desktop_file(args):
    global name
    global exec
    global icon

    string = "[Desktop Entry]\n"

    type = get_arg(args, Params.Type)
    if type is not None:
        string += to_string(type)
    else:
        string += to_string(Arg(Params.Type, value="Application"))

    name = get_arg(args, Params.Name)
    string += to_string(name)

    exec = get_path_arg(args, Params.Exec)
    string += to_string(exec)

    icon = get_path_arg(args, Params.Icon)
    if icon is None:
        icon = get_arg(args, Params.GlobalIcon)

    string += to_string(icon)

    string += to_string(get_arg(args, Params.Comment))

    string += to_string(get_list_arg(args, Params.Keywords))

    string += to_string(get_list_arg(args, Params.Categories))

    return string


def get_destination(args):
    for a in args:
        if a.param == Params.Destination:
            return a.value

    return default_destination


def get_filename(args):
    for a in args:
        if a.param == Params.Filename:
            return a.value

    return os.path.basename(exec.value)


def get_arg(args, param):
    for a in args:
        if a.param == param:
            return a

    return None


def get_path_arg(args, param):
    a = get_arg(args, param)
    if a is not None:
        a.value = os.path.abspath(a.value)
        return a

    return None


def get_list_arg(args, param):
    values = []
    for a in args:
        if a.param == param:
            values.append(a.value)

    if len(values) > 0:
        value = ""
        for v in values:
            value += v + ";"

        return Arg(param, value=value)

    return None


if __name__ == "__main__":
    strings = sys.argv[1:]
    args = parse_args(strings)

    content = desktop_file(args)

    if name is not None and exec is not None:
        destination = get_destination(args)
        filename = get_filename(args) + ".desktop"
        file_path = os.path.join(destination, filename)

        with open(file_path, "w") as desktop_file:
            desktop_file.write(content)
            print("created " + filename)
            exit()

    print("not enough arguments")
    print(help_string())

